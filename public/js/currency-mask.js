angular.module('app.currencyMask',[]).directive('currencyMask',function(){return{restrict:'A',require:'ngModel',link:function(scope,element,attrs,ngModelController){var formatNumber=function(value){value=value.toString();if(value=='-1'){return '';}
value=value.replace(/[^0-9]/g,"");var parts=value.split('.');parts[0]=parts[0].replace(/\d{1,3}(?=(\d{3})+(?!\d))/g,"$&,");if(parts[0].length>1){parts[0]=parts[0].replace(/^0+/,'');}
if(parts[1]&&parts[1].length>2){parts[1]=parts[1].substring(0,2);}
return parts.join(".");};var applyFormatting=function(){var value=element.val();var original=value;if(!value||value.length==0){return}
value=formatNumber(value);if(value!=original){element.val(value);element.triggerHandler('input')}};element.bind('keyup',function(e){var keycode=e.keyCode;var isTextInputKey=(keycode>47&&keycode<58)||keycode==32||keycode==8||(keycode>64&&keycode<91)||(keycode>95&&keycode<112)||(keycode>185&&keycode<193)||(keycode>218&&keycode<223);if(isTextInputKey){applyFormatting();}});element.bind('keypress',function(e){let key=Number(e.key)
if(isNaN(key)||e.key===null){e.preventDefault();}});element.bind('blur',function(evt){if(angular.isDefined(ngModelController.$modelValue)){applyFormatting();}});ngModelController.$parsers.push(function(value){if(!value||value.length==0){return value;}
value=value.toString();value=value.replace(/[^0-9\.]/g,"");return value;});ngModelController.$formatters.push(function(value){if(!value||value.length==0){return value;}
value=formatNumber(value);return value;});}};});